@model vlko.web.ViewModel.Page.PageViewModel
@using vlko.web.Controllers;
@using vlko.web.ViewModel.Page;
@{
	ViewBag.Title = "Page view";
}
<div id="page_view_content" class="ajax_container">
	<h2 class="note-main">@Model.StaticText.Title</h2>
	<article class="note-content">
		<div class="info">
			<div class="author" title="Author">@Model.StaticText.Creator.Name</div>
			<div class="publish-date" title="Publish date">@String.Format("{0:g}", Model.StaticText.PublishDate)</div>
			<div class="date" title="Last change date">@String.Format("{0:g}", Model.StaticText.ChangeDate)</div>
		</div>
		<div class="text">
			@Html.Raw(Model.StaticText.Text)
		</div>
	</article>
	@if (Model.StaticText.AllowComments || Model.StaticText.CommentCounts > 0) {


		<h4 class="cleaner">Komentáre (@Model.StaticText.CommentCounts):</h4>
		<div class="comment-sort cleaner">

			<a class="comment_sort flat" href="@Routes.PageView(
										   friendlyUrl: Html.ViewContext.RouteData.GetRequiredString("friendlyUrl"),
										   sort: "flat"
										 )" title="Sort by date"><img src="@Url.Content("~/Content/images/sort-az.gif")" alt="flat" /></a>
			<a class="comment_sort desc" href="@Routes.PageView(
										   friendlyUrl: Html.ViewContext.RouteData.GetRequiredString("friendlyUrl"),
										   sort: "desc"
										 )" title="Sort by date desc"><img src="@Url.Content("~/Content/images/sort-za.gif")" alt="flat desc" /></a>
			<a class="comment_sort tree" href="@Routes.PageView(
										   friendlyUrl: Html.ViewContext.RouteData.GetRequiredString("friendlyUrl"),
										   sort: "tree"
										 )" title="Sort as tree"><img src="@Url.Content("~/Content/images/sort-tree.gif")" alt="tree" /></a>
		</div>
 }
	@if (Model.CommentViewType == CommentViewTypeEnum.FlatDesc && Model.StaticText.AllowComments)
 {
		@Html.Partial("NewComment", Model.NewComment)
 }

	@if (Model.CommentViewType != CommentViewTypeEnum.Tree)
 {
		@Html.Partial("CommentsFlat", Model.FlatComments)
 }
 else
 {
		@Html.Partial("CommentsTree", Model.TreeComments)
 }

	@if (Model.CommentViewType != CommentViewTypeEnum.FlatDesc && Model.StaticText.AllowComments)
 {
		@Html.Partial("NewComment", Model.NewComment)
 }
</div>
@{ Html.ScriptInlineInclude(
@<script type="text/javascript">
	$(function () {
		$("#page_view_content a.comment_sort")
				.click(function () {
					var nextUrl = $(this).attr("href");
					$.ajax({
						url: nextUrl + "?ajaxTime=" + new Date().getTime(),
						success: function (data) {
							var content = $("#page_view_content");
							content.html(data);
							closeLoading();
							updateEffect(content);
							addToHistory(nextUrl);
						},
						error: ajaxException
					});

					return false;
				});
		$("#page_view_content .reply_link")
				.click(function () {
					var form = $("#page_view_content form");

					$("#ParentId").val($(this).attr("rel"));
					$("#Name").val("Re: " + $(this).closest(".page_comment").find(".title").text());

					return false;
				});
		$("#page_view_content form")
				.submit(function () {
					var form = $(this);
					if (form.valid()) {
						createLoading();
						$.ajax({
							url: form.attr("action") + "?ajaxTime=" + new Date().getTime(),
							type: "POST",
							data: form.serialize(),
							success: function (data) {
								if (data.actionName) {
									var nextUrl = data.actionName;
									$.ajax({
										url: nextUrl + "?ajaxTime=" + new Date().getTime(),
										success: function (data) {
											var content = $("#page_view_content");
											content.replaceWith(data);
											closeLoading();
											updateEffect(content);
										},
										error: ajaxException
									});
								}
								else {
									var content = $("#page_view_content");
									fillContentWithData(content, data);
									closeLoading();
									//updateEffect(content);
								}
							},
							error: ajaxException
						});
					}
					return false;
				}); ;
	});
</script>);
}


