@using vlko.core.Components

@helper Render(System.Web.Mvc.HtmlHelper html, IPagedModel pageModel, string routeName = null, object routeValues = null)
	{
	var routeValuesDictionary = new System.Web.Routing.RouteValueDictionary(routeValues);
	routeValuesDictionary.Add("Page", 0);

	Func<int, IHtmlString> activeClass = (pageNumber) => html.Raw(pageNumber == pageModel.CurrentPage ? " class='active'" : string.Empty);

	Func<int, string> active = (pageNumber) => pageNumber == pageModel.CurrentPage ? " active" : string.Empty;

	Func<int, System.Web.Routing.RouteValueDictionary> pageRoutes = (pageNumber) =>
	                                                                	{
																			routeValuesDictionary["Page"] = pageNumber;
																			return routeValuesDictionary;
																		};

	// check ranges
	int startItemNumber = (pageModel.CurrentPage - 1) * pageModel.PageItems + 1;
	if (startItemNumber < 0)
	{
		startItemNumber = 0;
	}

	int endItemNumber = startItemNumber + pageModel.PageItems - 1;
	if (endItemNumber > pageModel.Count)
	{
		endItemNumber = pageModel.Count;
	}

	if (startItemNumber > endItemNumber)
	{
		startItemNumber = endItemNumber;
	}


	const int pagerRange = 2;
	int pagesNumber = pageModel.PagesNumber;
	int currentPage = pageModel.CurrentPage;
	int lowestPage = Math.Min(currentPage - pagerRange, pagesNumber - (pagerRange +1) * 2);
	int highestPage = Math.Max(currentPage + pagerRange, (pagerRange + 1) * 2 + 1);
	bool lowestRangeDelimiterDisplayed = false;
	bool highesRangeDelimiterDisplayed = false;

	<div class="pagination well"><ul>
	@if (currentPage > 1)
	{
		<li class="first prev">@html.Raw(System.Web.Mvc.HtmlHelper.GenerateRouteLink(html.ViewContext.RequestContext, html.RouteCollection, "<<", routeName, pageRoutes(currentPage - 1), new System.Web.Routing.RouteValueDictionary(new { @class = "prev" })))</li>
	}
	else
	{
		<li class="first prev disabled"><a>&lt;&lt;</a></li>
	}
	@if (currentPage < pageModel.PagesNumber)
	{
		<li class="last next">@html.Raw(System.Web.Mvc.HtmlHelper.GenerateRouteLink(html.ViewContext.RequestContext, html.RouteCollection, ">>", routeName, pageRoutes(currentPage + 1), new System.Web.Routing.RouteValueDictionary(new { @class = "next" })))</li>
	}
	else
	{
		<li class="last next disabled"><a>&gt;&gt;</a></li>
	}
	<li class="first@(active(1))">@html.Raw(System.Web.Mvc.HtmlHelper.GenerateRouteLink(html.ViewContext.RequestContext, html.RouteCollection, "1", routeName, pageRoutes(1), null))</li>

	@for (int i = 2; i < pagesNumber; i++)
	{
		if (i < lowestPage)
		{
			if (!lowestRangeDelimiterDisplayed)
			{
				<li class="disabled"><a>...</a></li>
				lowestRangeDelimiterDisplayed = true;
			}
		}
		if (i >= lowestPage && i <= highestPage)
		{
			<li@activeClass(i)>@html.Raw(System.Web.Mvc.HtmlHelper.GenerateRouteLink(html.ViewContext.RequestContext, html.RouteCollection, i.ToString(), routeName, pageRoutes(i), null))</li>
		}
		if (i > highestPage)
		{
			if (!highesRangeDelimiterDisplayed)
			{
				<li class="disabled"><a>...</a></li>
				highesRangeDelimiterDisplayed = true;
			}
		}
	}
	@if (pagesNumber > 1)
	{
		<li class="last@(active(pagesNumber))">@html.Raw(System.Web.Mvc.HtmlHelper.GenerateRouteLink(html.ViewContext.RequestContext, html.RouteCollection, pagesNumber.ToString(), routeName, pageRoutes(pagesNumber), null))</li>
	}
	<li class="info disabled"><a>@string.Format("{0} - {1} of {2}", startItemNumber, endItemNumber, pageModel.Count)</a></li>
	</ul></div>

		vlko.core.HtmlExtender.ScriptManager.ScriptInclude(html, "~/Scripts/Pager.js");

		vlko.core.HtmlExtender.ScriptManager.ScriptInlineInclude(html,
			@<script type="text/javascript">
		$(function () {
			@{
				var contentId = (string)item.ViewData["content"];
				if (string.IsNullOrEmpty(contentId))
				{
					contentId = "content";
				}
			}
			$("#@contentId").ajaxPager();
		});
		</script>);
}
